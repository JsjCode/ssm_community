<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jsj.mapper.UserMapper">

    <select id="getUserByPassword" parameterType="String" resultType="User">
        SELECT * FROM user WHERE username = #{username} AND password = #{password}
    </select>

    <select id="getById" parameterType="int" resultType="User">
        SELECT * FROM user WHERE id = #{id}
    </select>

    <select id="getUserByCommentId" parameterType="int" resultType="User">
        SELECT
            user.`username`
        FROM
            COMMENT
            INNER JOIN USER
                ON comment.`user_id` = user.`id`
                AND comment.`id` = #{commentId}
    </select>

    <!--  常逛社区列表（4条）  -->
    <select id="communitiesByUserId" parameterType="int" resultType="Community">
        SELECT
	        log.community_id AS id,
	        community.`name`
        FROM
	        `browse_log` AS log
	        INNER JOIN community ON community.id = log.community_id
        WHERE
	        log.user_id = #{userId}
	        AND log.type = 0
        GROUP BY
	        log.community_id
        ORDER BY
	        COUNT( log.user_id ) DESC
	    LIMIT 4
    </select>

    <select id="commentDynamicsByUserId" parameterType="int" resultType="map">
        SELECT
	        community.`name` AS communityName,
	        community.id AS communityId,
	        invitation.title AS invitation,
	        invitation.id AS invitationId,
	        `comment`.content,
	        `comment`.time
        FROM
	        `comment`
	        INNER JOIN invitation ON `comment`.invitation_id = invitation.id
	        INNER JOIN community ON invitation.community_id = community.id
        WHERE
	        `comment`.user_id = #{userId}
	    ORDER BY `comment`.time DESC
    </select>

    <select id="invitationsByUserId" parameterType="int" resultType="map">
        SELECT
	        invitation.id AS invitationId,
	        invitation.title AS invitationTitle,
	        invitation.time,
	        community.id AS communityId,
	        community.`name` AS communityName
        FROM
	        invitation
	        INNER JOIN community ON community.id = invitation.community_id
        WHERE user_id = #{userId}
        ORDER BY invitation.time DESC
    </select>

    <select id="getNoticeCount" parameterType="int" resultType="int">
        SELECT
        COUNT(1)
        FROM
        notice
        INNER JOIN `comment` ON `comment`.id = notice.comment_id
        AND notice.`status` = 0
        AND notice.recipient_id &lt;&gt; `comment`.user_id
        AND notice.recipient_id = #{userId}
    </select>

    <select id="getNotices" parameterType="int" resultType="map">
        SELECT
        `comment`.id,`comment`.user_id,`comment`.content,`comment`.time,`comment`.invitation_id
        FROM
        notice INNER JOIN`comment`
        ON `comment`.id = notice.comment_id
        AND notice.recipient_id &lt;&gt; `comment`.user_id
        AND notice.recipient_id = #{userId}
    </select>

    <insert id="insert" parameterType="User">
        INSERT INTO user(username,password,birthday,email,tel_number,avatar)
        VALUES(#{username},#{password},#{birthday},#{email},#{telNumber},#{avatar})
    </insert>

    <update id="update" parameterType="User">
        UPDATE user
        <set>
            <if test="username!=null and username!=''">
                username = #{username},
            </if>
            <if test="password!=null and password!=''">
                password = #{password},
            </if>
            <if test="birthday!=null and birthday!=''">
                birthday = #{birthday},
            </if>
            <if test="email!=null and email!=''">
                email = #{email},
            </if>
            <if test="telNumber!=null and telNumber!=''">
                tel_number = #{telNumber},
            </if>
            <if test="avatar!=null and avatar!=''">
                avatar = #{avatar},
            </if>
        </set>
        WHERE id = #{id}
    </update>

    <update id="removeNotice" parameterType="int">
        UPDATE notice
        <set>
            `status` = 1
        </set>
        WHERE
	        recipient_id = #{userId}
	        AND `status` = 0
    </update>

</mapper>

